import React, { useState, useEffect } from 'react';
import { Calculator, TrendingUp, Calendar, DollarSign, Clock, CheckSquare, Square, ChevronDown } from 'lucide-react';

export default function DefiPointsCalculator() {
  const [questData, setQuestData] = useState({});
  const [calculatedPoints, setCalculatedPoints] = useState(null);
  const [selectedQuests, setSelectedQuests] = useState([]);
  const [showQuestSelector, setShowQuestSelector] = useState(false);

  // Add custom styles to remove number input arrows
  const numberInputStyle = `
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    input[type=number] {
      -moz-appearance: textfield;
    }
  `;

  // Quests with their multipliers
  const quests = [
    { id: 1, name: 'Hold USX', multiplier: 5 },
    { id: 2, name: 'Hold eUSX', multiplier: 1 },
    { id: 3, name: 'Supply eUSX to USX/USX LP (Orca)', multiplier: 2.8 },
    { id: 4, name: 'Supply USX to eUSX/USX LP (Orca)', multiplier: 14 },
    { id: 5, name: 'Supply USX to USX/USDC LP (Orca)', multiplier: 14 },
    { id: 6, name: 'Supply USDC to USX/USDC LP (Orca)', multiplier: 7 },
    { id: 7, name: 'Supply USDC to USX/USDC LP (Raydium)', multiplier: 6.5 },
    { id: 8, name: 'Supply USX to USX/USDC LP (Raydium)', multiplier: 13 },
    { id: 9, name: 'Supply eUSX to USX/USX LP (Raydium)', multiplier: 2.6 },
    { id: 10, name: 'Supply USX to USX/USX LP (Raydium)', multiplier: 13 },
    { id: 11, name: 'Supply USX (Kamino)', multiplier: 5 },
    { id: 12, name: 'Supply eUSX (Kamino)', multiplier: 1 },
    { id: 13, name: 'Borrow USX (Kamino)', multiplier: 1 },
    { id: 14, name: 'Farm Variable Yield (Exponent)', multiplier: 15 },
    { id: 15, name: 'Supply eUSX Liquidity (Exponent)', multiplier: 10 }
  ];

  const calculatePoints = () => {
    let totalPoints = 0;
    const now = new Date();
    const questBreakdown = [];

    Object.entries(questData).forEach(([questId, data]) => {
      const amount = parseFloat(data.amount);
      const hour = parseInt(data.hour);
      
      if (!isNaN(amount) && amount > 0 && data.date && !isNaN(hour)) {
        const quest = quests.find(q => q.id === parseInt(questId));
        if (quest) {
          const deposit = new Date(data.date);
          deposit.setHours(hour, 0, 0, 0);
          
          const timeDiff = now - deposit;
          const hours = timeDiff / (1000 * 60 * 60);
          
          if (hours >= 0) {
            // Base: 1 dollar invested = 1 flare per day (or 1/24 flare per hour)
            const basePoints = amount * (hours / 24);
            const questPoints = basePoints * quest.multiplier;
            totalPoints += questPoints;
            
            questBreakdown.push({
              questName: quest.name,
              amount,
              hours,
              days: Math.floor(hours / 24),
              multiplier: quest.multiplier,
              points: questPoints
            });
          }
        }
      }
    });

    setCalculatedPoints({
      total: totalPoints,
      breakdown: questBreakdown
    });
  };

  useEffect(() => {
    calculatePoints();
  }, [questData]);

  const resetCalculator = () => {
    setQuestData({});
    setCalculatedPoints(null);
  };

  const toggleQuestSelection = (questId) => {
    setSelectedQuests(prev => 
      prev.includes(questId)
        ? prev.filter(id => id !== questId)
        : [...prev, questId]
    );
  };

  const getVisibleQuests = () => {
    if (selectedQuests.length === 0) return [];
    return quests.filter(q => selectedQuests.includes(q.id));
  };

  const updateQuestField = (questId, field, value) => {
    setQuestData(prev => ({
      ...prev,
      [questId]: {
        ...prev[questId],
        [field]: value
      }
    }));
  };

  const getTotalDeposited = () => {
    return Object.values(questData).reduce((sum, data) => {
      const val = parseFloat(data.amount);
      return sum + (isNaN(val) ? 0 : val);
    }, 0);
  };

  const getActiveQuestsCount = () => {
    return Object.keys(questData).filter(id => {
      const data = questData[id];
      const amount = parseFloat(data?.amount);
      return data?.date && !isNaN(amount) && amount > 0;
    }).length;
  };

  const getTodayDate = () => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  };

  return (
    <div className="min-h-screen p-6 flex items-center justify-center" style={{ backgroundColor: '#181323' }}>
      <style>{numberInputStyle}</style>
      <div className="max-w-4xl w-full backdrop-blur-lg rounded-2xl shadow-2xl p-8" style={{ 
        background: 'linear-gradient(135deg, rgba(253, 157, 54, 0.1) 0%, rgba(183, 197, 225, 0.1) 100%)',
        border: '1px solid rgba(253, 157, 54, 0.3)'
      }}>
        <div className="flex items-center gap-3 mb-6">
          <div className="p-3 rounded-xl" style={{ background: 'linear-gradient(135deg, #fd9d36 0%, #b7c5e1 100%)' }}>
            <Calculator className="text-white" size={28} />
          </div>
          <div>
            <h1 className="text-3xl font-bold" style={{ color: '#fd9d36' }}>Flare Points Calculator</h1>
            <p className="text-sm" style={{ color: '#b7c5e1' }}>Track points across multiple strategies</p>
          </div>
        </div>

        <div className="space-y-4">
          <div>
            <label className="flex items-center gap-2 font-medium mb-3" style={{ color: '#b7c5e1' }}>
              <TrendingUp size={18} />
              Select Active Strategies
            </label>
            <div className="relative">
              <button
                onClick={() => setShowQuestSelector(!showQuestSelector)}
                className="w-full rounded-lg px-4 py-3 flex items-center justify-between hover:opacity-80 transition-colors focus:outline-none"
                style={{ 
                  background: 'rgba(253, 157, 54, 0.2)',
                  border: '1px solid rgba(253, 157, 54, 0.4)',
                  color: '#b7c5e1'
                }}
              >
                <span className="text-sm">
                  {selectedQuests.length === 0 
                    ? 'Choose strategies to track...' 
                    : `${selectedQuests.length} strateg${selectedQuests.length > 1 ? 'ies' : 'y'} selected`}
                </span>
                <ChevronDown size={18} className={`transition-transform ${showQuestSelector ? 'rotate-180' : ''}`} />
              </button>
              
              {showQuestSelector && (
                <div className="absolute z-10 w-full mt-2 rounded-lg shadow-2xl max-h-80 overflow-y-auto" style={{
                  backgroundColor: '#181323',
                  border: '1px solid rgba(253, 157, 54, 0.4)'
                }}>
                  {quests.map(quest => (
                    <div
                      key={quest.id}
                      onClick={() => toggleQuestSelection(quest.id)}
                      className="flex items-center gap-3 p-3 cursor-pointer transition-colors"
                      style={{ 
                        borderBottom: '1px solid rgba(183, 197, 225, 0.1)',
                        ':hover': { backgroundColor: 'rgba(253, 157, 54, 0.1)' }
                      }}
                      onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'rgba(253, 157, 54, 0.1)'}
                      onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
                    >
                      {selectedQuests.includes(quest.id) ? (
                        <CheckSquare size={20} className="flex-shrink-0" style={{ color: '#fd9d36' }} />
                      ) : (
                        <Square size={20} className="flex-shrink-0" style={{ color: '#b7c5e1', opacity: 0.5 }} />
                      )}
                      <div className="flex-1">
                        <div className="text-sm font-medium" style={{ color: '#b7c5e1' }}>{quest.name}</div>
                        <div className="text-xs" style={{ color: '#fd9d36' }}>{quest.multiplier}x multiplier</div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {getVisibleQuests().length > 0 && (
            <div>
              <label className="flex items-center gap-2 font-medium mb-3" style={{ color: '#b7c5e1' }}>
                <Calendar size={18} />
                Strategy Deposits & Timeline
              </label>
              <div className="rounded-lg p-4 max-h-96 overflow-y-auto space-y-3" style={{
                background: 'rgba(253, 157, 54, 0.1)',
                border: '1px solid rgba(253, 157, 54, 0.3)'
              }}>
                {getVisibleQuests().map(quest => (
                  <div
                    key={quest.id}
                    className="p-4 rounded-lg transition-colors"
                    style={{ 
                      background: 'rgba(183, 197, 225, 0.1)',
                      ':hover': { background: 'rgba(183, 197, 225, 0.15)' }
                    }}
                    onMouseEnter={(e) => e.currentTarget.style.background = 'rgba(183, 197, 225, 0.15)'}
                    onMouseLeave={(e) => e.currentTarget.style.background = 'rgba(183, 197, 225, 0.1)'}
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div>
                        <div className="text-sm font-semibold" style={{ color: '#b7c5e1' }}>{quest.name}</div>
                        <div className="text-xs" style={{ color: '#fd9d36' }}>{quest.multiplier}x multiplier</div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-3">
                      <div>
                        <label className="text-xs mb-1 block flex items-center gap-1" style={{ color: '#b7c5e1', opacity: 0.7 }}>
                          <DollarSign size={12} />
                          Amount
                        </label>
                        <input
                          type="number"
                          value={questData[quest.id]?.amount || ''}
                          onChange={(e) => updateQuestField(quest.id, 'amount', e.target.value)}
                          placeholder="0"
                          className="w-full rounded-lg px-3 py-2 text-sm focus:outline-none"
                          style={{
                            background: 'rgba(253, 157, 54, 0.2)',
                            border: '1px solid rgba(253, 157, 54, 0.3)',
                            color: '#b7c5e1'
                          }}
                        />
                      </div>
                      
                      <div>
                        <label className="text-xs mb-1 block flex items-center gap-1" style={{ color: '#b7c5e1', opacity: 0.7 }}>
                          <Calendar size={12} />
                          Date
                        </label>
                        <input
                          type="date"
                          value={questData[quest.id]?.date || ''}
                          onChange={(e) => updateQuestField(quest.id, 'date', e.target.value)}
                          max={getTodayDate()}
                          className="w-full rounded-lg px-3 py-2 text-sm focus:outline-none"
                          style={{
                            background: 'rgba(253, 157, 54, 0.2)',
                            border: '1px solid rgba(253, 157, 54, 0.3)',
                            color: '#b7c5e1'
                          }}
                        />
                      </div>
                      
                      <div>
                        <label className="text-xs mb-1 block flex items-center gap-1" style={{ color: '#b7c5e1', opacity: 0.7 }}>
                          <Clock size={12} />
                          Hour
                        </label>
                        <select
                          value={questData[quest.id]?.hour || '12'}
                          onChange={(e) => updateQuestField(quest.id, 'hour', e.target.value)}
                          className="w-full rounded-lg px-3 py-2 text-sm focus:outline-none"
                          style={{
                            background: 'rgba(253, 157, 54, 0.2)',
                            border: '1px solid rgba(253, 157, 54, 0.3)',
                            color: '#b7c5e1'
                          }}
                        >
                          {Array.from({ length: 24 }, (_, i) => (
                            <option key={i} value={i} style={{ backgroundColor: '#181323' }}>
                              {String(i).padStart(2, '0')}:00
                            </option>
                          ))}
                        </select>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              <div className="mt-2 flex justify-between text-sm" style={{ color: '#b7c5e1', opacity: 0.7 }}>
                <span>Active Strategies: {getActiveQuestsCount()}</span>
                <span>Total Deposited: ${getTotalDeposited().toLocaleString()}</span>
              </div>
            </div>
          )}

          <div className="rounded-lg p-4" style={{
            background: 'rgba(253, 157, 54, 0.2)',
            border: '1px solid rgba(253, 157, 54, 0.4)'
          }}>
            <div className="flex items-center gap-2 font-medium mb-1" style={{ color: '#fd9d36' }}>
              <TrendingUp size={18} />
              Base Points Rate
            </div>
            <p className="text-lg font-semibold" style={{ color: '#b7c5e1' }}>$1 = 1 Flare / day</p>
            <p className="text-sm mt-1" style={{ color: '#b7c5e1', opacity: 0.7 }}>Each strategy applies its own multiplier and timeline</p>
          </div>

          <button
            onClick={resetCalculator}
            className="w-full font-semibold py-3 rounded-lg transition-colors duration-200"
            style={{
              background: 'rgba(253, 157, 54, 0.2)',
              border: '1px solid rgba(253, 157, 54, 0.4)',
              color: '#b7c5e1'
            }}
            onMouseEnter={(e) => e.currentTarget.style.background = 'rgba(253, 157, 54, 0.3)'}
            onMouseLeave={(e) => e.currentTarget.style.background = 'rgba(253, 157, 54, 0.2)'}
          >
            Reset All
          </button>
        </div>

        {calculatedPoints && calculatedPoints.total > 0 && (
          <div className="mt-6 space-y-4">
            <div className="rounded-xl p-6" style={{
              background: 'linear-gradient(135deg, #fd9d36 0%, #b7c5e1 100%)'
            }}>
              <p className="text-sm font-medium mb-1" style={{ color: 'rgba(255, 255, 255, 0.8)' }}>Total Flare Earned</p>
              <p className="text-4xl font-bold text-white">{calculatedPoints.total.toLocaleString(undefined, { maximumFractionDigits: 2 })}</p>
              <div className="mt-4 pt-4 space-y-1" style={{ borderTop: '1px solid rgba(255, 255, 255, 0.2)' }}>
                <p className="text-sm" style={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                  Total Deposited: ${getTotalDeposited().toLocaleString()}
                </p>
                <p className="text-sm" style={{ color: 'rgba(255, 255, 255, 0.7)' }}>
                  Active Strategies: {getActiveQuestsCount()} of {quests.length}
                </p>
              </div>
            </div>

            {calculatedPoints.breakdown.length > 0 && (
              <div className="rounded-xl p-5" style={{
                background: 'rgba(183, 197, 225, 0.1)',
                border: '1px solid rgba(183, 197, 225, 0.3)'
              }}>
                <p className="font-semibold mb-3" style={{ color: '#fd9d36' }}>Strategy Breakdown</p>
                <div className="space-y-2">
                  {calculatedPoints.breakdown.map((quest, idx) => (
                    <div key={idx} className="p-3 rounded-lg" style={{
                      background: 'rgba(253, 157, 54, 0.1)'
                    }}>
                      <div className="flex justify-between items-start mb-1">
                        <span className="text-sm font-medium" style={{ color: '#b7c5e1' }}>{quest.questName}</span>
                        <span className="font-semibold" style={{ color: '#fd9d36' }}>{quest.points.toLocaleString(undefined, { maximumFractionDigits: 2 })} Flare</span>
                      </div>
                      <div className="text-xs space-y-0.5" style={{ color: '#b7c5e1', opacity: 0.6 }}>
                        <div>${quest.amount.toLocaleString()} × {quest.multiplier}x × {quest.days} days ({quest.hours.toFixed(1)}h)</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}
